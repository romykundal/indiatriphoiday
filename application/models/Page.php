<?php

/**
 * Page
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Page extends BasePage
{
	
	/**
	 * get default page
	 * @author kkumar 
	 * @version 1.0
	 */
	
	public function DefaultPagesList(){
		$q = Doctrine_Query::create()
			->select('id,pagetitle')
			->from('Page p')
			->where('p.pagetype="default"')
			->andWhere('p.deleted = 0')
			->andWhere('p.publish = 1')
			->orderBy('p.pagetitle ASC')
			->fetchArray();
		return $q;
	}
	
	/**
	 * get offer pages
	 * @author kkumar
	 * @version 1.0
	 */
	
	public function getPagesOffer(){
		$q = Doctrine_Query::create()
		->select('id,pagetitle')->from('Page p')
		->where('p.showpage=1')
		->andWhere('p.publish=1')
		->andWhere('p.deleted=0')
		->fetchArray();
		return $q;
	}
	
	
	/**
	 * get all pages
	 * @author kkumar
	 * @version 1.0
	 */
	
	public function getPages($params){
		
		$srhPage  = 	(isset($params["searchText"]) && trim($params["searchText"])!='undefined') ? $params["searchText"] : '';
		$conn2 = BackEnd_Helper_viewHelper::addConnection();
		
		if (Auth_StaffAdapter::hasIdentity()) {
			$roleId = 	Zend_Auth::getInstance()->getIdentity()->roleId;
		}
		
		BackEnd_Helper_viewHelper::closeConnection($conn2);
		
		$pageList = Doctrine_Query::create()
		->select('p.pageTitle,p.created_at,p.publish')
		->from('Page p')
		->where('p.deleted=0')
		->andWhere("p.pagetitle LIKE ?", "$srhPage%");
	  if($roleId>2){
	  	$pageList->andWhere("p.pageLock = 0");
	  }

	 /* if(trim($params["searchType"])!='undefined'){
	  	$pageList->andWhere("p.pagetype = '".$params['searchType']."'");
	  }*/
		    
		$result = 	DataTable_Helper::generateDataTableResponse($pageList,
				$params,
				array("__identifier" => 'p.pageTitle','p.created_at'),
				array(),
				array());
		return $result;
		
	}
	
	/**
	 * get trashed pages
	 * @author kkumar
	 * @version 1.0
	 */
	public function gettrashedPages($params){
	
		$srhPage 	= 	(isset($params["searchText"]) && trim($params["searchText"])!='') ? $params["searchText"] : '';
		$pageList = Doctrine_Query::create()
		->select('p.pageTitle,p.created_at,p.updated_at')
		->from('Page p')
		->where('p.deleted=1')
		->andWhere("p.pagetitle LIKE ?", "$srhPage%");
	
		$result = 	DataTable_Helper::generateDataTableResponse($pageList,
				$params,
				array("__identifier" => 'p.pageTitle','p.created_at','p.updated_at'),
				array(),
				array());
		return $result;
	
	}

	
	
	/**
	 * get page detail where is money saving
	 * @author rkumar
	 * @version 1.0
	 */
	
	function checkFotterpages($tempid){
		$q = Doctrine_Query::create()
		->select()->from('Page p')
		->where('p.pageAttributeId="'.$tempid.'"')
		->andWhere('p.deleted=0')
		->fetchArray();
	
		return $q;
	}
	
	
	/**
	 * save page detail
	 * @author kkumar
	 * @version 1.0
	 */
	
	public function savePage($params){
	    		
		$this->publish 	 = 1;
	/*	if($params['savePagebtn']=='draft'){
			$this->publish 	 = 0;
		}
	echo "<pre>";
	print_r($_FILES);
	print_r($params);
	die;*/
		/*if (isset($_FILES['logoFile']['name']) && $_FILES['logoFile']['name'] != '') {
			 
			$result = self::uploadImage('logoFile');
			$this->logoId = 0;
		    if ($result['status'] == '200') {
				$ext = BackEnd_Helper_viewHelper::getImageExtension(
						$result['fileName']);
				$this->logo->ext = $ext;
				$this->logo->path = $result['path'];
				$this->logo->name = $result['fileName'];
			}
			else {
				return false;
			}
		}*/
		
		
		
		$this->pageTitle = BackEnd_Helper_viewHelper::stripSlashesFromString($params['pageTitle']);
		$this->metaTitle = BackEnd_Helper_viewHelper::stripSlashesFromString($params['pagemetaTitle']);
		$this->metaDescription = BackEnd_Helper_viewHelper::stripSlashesFromString($params['pagemetaDesc']);
		$this->content = BackEnd_Helper_viewHelper::stripSlashesFromString($params['pageDesc']);
		
	    //FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll($key);
	    
	    try {
	    //call cache function
		   
			$page = $this->save();
			$pageId =  $this->id;
			
			
					
			
			return true;
	    }catch (Exception $e)
	    {	return false;
	    }
	}
	
	/**
	 * get page detail
	 * @author kkumar
	 * @version 1.0
	 */
	
	function getPageDetail($pageId){
		/*echo $pageId;
		die("In page momdel");*/
		$q = Doctrine_Query::create()
		->select('p.*')->from('Page p')
		->where('p.id='.$pageId.'')
		->fetchArray();
		return $q;
	}

function getPageInfo($pageId){
		
		$q = Doctrine_Query::create()
		->select('p.*')->from('Page p')
		->where('p.id='.$pageId.'')
		->fetchArray();
		return $q;
	}


	
	/**
	 * update page detail
	 * @author rkumar
	 * @version 1.0
	 */
	
	
	function updatePage($params){
	
		/*echo "<pre>";
    	print_r($params);
    	die;*/
		$this->publish 	= 1;
			
	/*	if (isset($_FILES['logoFile']['name']) && $_FILES['logoFile']['name'] != '') {
			$result = self::uploadImage('logoFile');
			if ($result['status'] == '200') {
				$ext = BackEnd_Helper_viewHelper::getImageExtension(
						$result['fileName']);
				$this->logo->ext = $ext;
				$this->logo->path = $result['path'];
				$this->logo->name = $result['fileName'];
			}else {
				return false;
			}
		}*/
		
		$this->pageTitle = BackEnd_Helper_viewHelper::stripSlashesFromString($params['pageTitle']);
		$this->metaTitle = BackEnd_Helper_viewHelper::stripSlashesFromString($params['pagemetaTitle']);
		$this->metaDescription = BackEnd_Helper_viewHelper::stripSlashesFromString($params['pagemetaDesc']);
		$this->content = BackEnd_Helper_viewHelper::stripSlashesFromString($params['pageDesc']);
		
		$pageid = @$params['pageId'];
		
		try{
		//call cache function
			$page = $this->save();
			$pageId =  $this->id;
		
			return true;
		}catch (Exception $e){
			return false;
		}
		
		
			
	}
	
	
	/**
	 * export page list
	 * @author jsingh
	 * @version 1.0
	 */
	
public static function exportpagelist() {
	
		$pageList = Doctrine_Query::create()->select('F.*')
		->from("Page  F")
		->where("F.deleted=0")
		->orderBy("F.id DESC")
		->fetchArray();
	return $pageList;
	
	}
	/**
	 * restore shop by id
	 * @param $id
	 * @author jsingh
	 * @version 1.0
	 */
	public static function restorePage($id) {
	
		if ($id) {
			//update status of record by id(deleted=0)
			$O = Doctrine_Query::create()->update('Page')->set('deleted', '0')
			->where('id=' . $id);
			$O->execute();
			
			$u = Doctrine_Core::getTable("Page")->find($id);
			
			$r = Doctrine_Query::create()->update('RoutePermalink')->set('deleted', '0')
			->where('permalink= "'.$u->permaLink.'"');
			$r->execute();
			
	
		} else {
			$id = null;
		}
		//call cache function
		FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_page_list');
		FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_speciallist_list');
		return $id;
	}
	
	/**
	 * delete page permanently
	 * @author jsingh
	 * @version 1.0
	 */
	
	public static function deletepage($id) {
	
        $O = Doctrine_Query::create()->update('Page')->set('deleted', '2')
		->where('id=' . $id);
		$O->execute();
		
		$u = Doctrine_Core::getTable("Page")->find($id);
			
		$r = Doctrine_Query::create()->delete('RoutePermalink')
		->where('permalink= "'.$u->permaLink.'"');
		$r->execute();
		
		//call cache function
		FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_page_list');
		FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_speciallist_list');
		return 1;
	}
	/**
	 * Move record in trash.
	 * @param integer $id
	 * @version 1.0
	 * @author  jsingh
	 * @return integer $id
	 */
	public static function moveToTrash($id){
	
		if ($id) {
			//find record by id
			$u = Doctrine_Core::getTable("Page")->find($id);
			$u->delete();
			
			$r = Doctrine_Core::getTable("RoutePermalink")->findOneBy('permalink', $u->permaLink);
			if(!empty($r))
			{
				$r->delete();
			}
				
		} else {
				
			$id = null;
		}
		//call cache function
		FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_page_list');
		FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_speciallist_list');
		return $id;
	
	}
	
	
	/**
	 * get to five page
	 * @param string $keyword
	 * @return array $data
	 * @author jsingh
	 * @version 1.0
	 */
	public static function searchToFivePage($keyword,$type) {
	
		$qry = Doctrine_Query::create()->select('p.pagetitle as pagetitle ')
		->from("Page p")->where('p.deleted='.$type.'')
		->andWhere("p.pagetitle LIKE ?", "$keyword%");
		
		$role =  Zend_Auth::getInstance()->getIdentity()->roleId;
		if($role=='4' || $role=='3')
		{
			$qry->andWhere("p.pageLock='0'");
				
	    }
		
		$data = $qry->orderBy("p.pagetitle ASC")->limit(5)->fetchArray();
		return $data;
	}
	
/**-------------------start front end-------------------------*/
	
	/**
	 * Fetches one record according to id to show in F.A.Q. form
	 * @param $id
	 * @author mkaur
	 */
	public static function getDefaultPage($id){
		$data = Doctrine_Query::create()
		->select("p.*")
		->from('Page p')
		->where("p.id = ?" , $id)
		->andWhere('p.deleted=0')
		->fetchOne(null , Doctrine::HYDRATE_ARRAY);
		return $data;
	}	
	
	/**
	 * Fetches all list of records of F.A.Q. pages
	 * @author mkaur
	 */
	public static function getPageList($id){
		$data = Doctrine_Query::create()
		->select("p.*")
		->from('Page p')
		->where('p.deleted=0')
		->andWhere('p.pageAttributeId='.$id)
		->fetchArray();
		return $data;
	}
	
	
	/**
	 * upload image
	 * @param $_FILES[index]  $file
	 */
	public function uploadImage($file) {
	
		if (!file_exists(UPLOAD_IMG_PATH))
			mkdir(UPLOAD_IMG_PATH,776, true);
	
		// generate upload path for images related to shop
		$uploadPath = UPLOAD_IMG_PATH . "page/";
		$adapter = new Zend_File_Transfer_Adapter_Http();
	
		// generate real path for upload path
		$rootPath = ROOT_PATH . $uploadPath;
	
		// get upload file info
		$files = $adapter->getFileInfo($file);
	
		// check upload directory exists, if no then create upload directory
		if (!file_exists($rootPath))
			mkdir($rootPath,776, true);
	
		// set destination path and apply validations
		$adapter->setDestination($rootPath);
		$adapter->addValidator('Extension', false, array('jpg,jpeg,png', true));
		$adapter->addValidator('Size', false, array('max' => '2MB'));
		// get file name
		$name = $adapter->getFileName($file, false);
	
		// rename file name to by prefixing current unix timestamp
		$newName = time() . "_" . $name;
	
		// generates complete path of image
		$cp = $rootPath . $newName;
	
	
		$path = ROOT_PATH . $uploadPath . "thum_" . $newName;
		BackEnd_Helper_viewHelper::resizeImage($files[$file] , $newName ,132, 95, $path);
		
	
		$path = ROOT_PATH . $uploadPath . "thum_page_small" . $newName;
		BackEnd_Helper_viewHelper::resizeImage($files[$file] ,$newName ,60, 40, $path);
		
		$path = ROOT_PATH . $uploadPath . "thum_page_large_" . $newName;
		BackEnd_Helper_viewHelper::resizeImage($files[$file] ,$newName ,150, 100, $path);
		
		$path = ROOT_PATH . $uploadPath . "thum_extra_large_" . $newName;
		BackEnd_Helper_viewHelper::resizeImage($files[$file] ,$newName ,170, 127, $path);
		
		/**
		 *	 generating thumnails for upload logo if file in shop logo
		 */
		if ($file == "logoFile") {
			$path = ROOT_PATH . $uploadPath . "thum_large_" . $newName;
	
			BackEnd_Helper_viewHelper::resizeImage($files[$file], $newName,
					200, 150, $path);
		}
	
		// apply filter to rename file name and set target
		$adapter
		->addFilter(
				new Zend_Filter_File_Rename(
						array('target' => $cp, 'overwrite' => true)),
				null, $file);
	
		// recieve file for upload
		$adapter->receive($file);
	
		// check is file is valid then
	
		if ($adapter->isValid($file)) {
	
			return array("fileName" => $newName, "status" => "200",
					"msg" => "File uploaded successfully",
					"path" => $uploadPath);
	
		} else {
	
			return array("status" => "-1",
					"msg" => "Please upload the valid file");
	
		}
	
	}
	
	function deletePageImage($params){
	
		$O = Doctrine_Query::create()
		->update('Page')
		->set('logoId', '0')
		->where('id=' . $params['pageId']);
		$O->execute();
		return 1;
		//print_r($params);
	}
	
	/**
	 * get page detail from slug name
	 * @author Raman
	 * @version 1.0
	 */
	
	public static function getPageDetailFromSlug($slug){
		$q = Doctrine_Query::create()
		->select('p.content, p.pagetitle')
		->from('Page p')
		->where('p.slug="'.$slug.'"')
		->andWhere('p.deleted=0')
		->fetchArray();
		return $q;
	}
	
	
	/**
	 * get page detail from permalink
	 * @author Raman
	 * @version 1.0
	 */
	
	public static function getPageDetailFromPermalink($permalink){
		$q = Doctrine_Query::create()
		->select('p.content, p.pagetitle')
		->from('Page p')
		->where('p.permalink="'.$permalink.'"')
		->andWhere('p.deleted=0')
		->fetchArray();
		return $q;
	}

	
	
	
	/**
	 *  Author Er.kundal
	 *  Get footer pages
	 *	Version: 1.0
	 */
	public function getFooterpages()
	{
	
		$data = Doctrine_Query::create()
		->select()
		->from('page p')
		->where('p.pageAttributeId=15' )
		->andWhere('p.deleted=0')
		->limit(10)->fetchArray();
		
		return $data;
	}
    
	public function getPageAttributes($slug){
		
		$q = Doctrine_Query::create()
		->select('p.id,a.*')->from('Page p')
		->leftJoin('p.pageattribute a')
		->where('p.slug="'.$slug.'"')
		->andWhere('p.deleted=0')
		->fetchArray();
		return $q;
	}
	
	/**
	 *  Author Raman
	 *  Get page details on id basis
	 *	Version: 1.0
	 */
	
	public static function getdefaultPageProperties($permalink){
	
		$data = Doctrine_Query::create()
		->select('p.*')
		->from('Page p')
		->where("permaLink = '". $permalink ."'")
		->andWhere('p.deleted=0')
		->fetchArray();
		return $data;
	}
	
	public static function getPageFromPageAttr($id){
	
		$data = Doctrine_Query::create()->select('p.*')
		->from('Page p')
		->where("pageAttributeId = ?", $id)
		->andWhere('p.deleted=0')
		->orderBy('id DESC')
		->fetchOne();

		return $data;
	}
	
	
	public static function getPageFromPageAttrFiltered($id){
	
		$data = Doctrine_Query::create()->select('p.id,p.pageTitle,p.metaTitle,p.metaDescription,p.permaLink')
		->from('Page p')
		->where("pageAttributeId = ?", $id)
		->andWhere('p.deleted=0')
		->orderBy('id DESC')
		->fetchOne(null, Doctrine::HYDRATE_ARRAY);

		return $data;
	}
	
	/**
	 * get page attrubute from page table by id
	 * 
	 * @param integre $id
	 * @return Ambigous <mixed, boolean, Doctrine_Record, Doctrine_Collection, PDOStatement, Doctrine_Adapter_Statement, Doctrine_Connection_Statement, unknown, number>
	 * @author kraj
	 * @version 1.0
	 */
	public static function getPageFromPageAttrInOffer($id){
	
		$data = Doctrine_Query::create()->select('p.id,p.permaLink,p.pageTitle,p.metaTitle,p.metaDescription')
		->from('Page p')
		->where("pageAttributeId = ?", $id)
		->andWhere('p.deleted=0')
		->orderBy('id DESC')
		->fetchOne();
		return $data;
	}
	/**
	 * get page attrubute from page table by id
	 *
	 * @param integre $id
	 * @return Ambigous <mixed, boolean, Doctrine_Record, Doctrine_Collection, PDOStatement, Doctrine_Adapter_Statement, Doctrine_Connection_Statement, unknown, number>
	 * @author kraj
	 * @version 1.0
	 */
	public static function getPageFromPageAttrInOfferPop($id){
		$data = Doctrine_Query::create()->select('p.id,p.permaLink')
		->from('Page p')
		->where("pageAttributeId = ?", $id)
		->andWhere('p.deleted=0')
		->orderBy('id DESC')
		->fetchOne();
		return $data;
	}
	/**
	 *  Author blal
	 *  Get offer list pages
	*/
	
	public static function getOfferListPage(){
	
		$data = Doctrine_Query::create()
				->select('p.id,p.pageType,p.pageTitle,p.permaLink,p.metaDescription,i.path,i.name')
				->from('Page p')
				->leftJoin('p.logo i')
				->where("pageType = ?", 'offer')
				->andWhere('p.deleted=0')
				->limit(9)
				->fetchArray();
		return $data;
	}
	/**
	 *  @author kraj
	 *  Get page details on id basis
	 *	Version: 1.0
	 */
public static function getPageDetailInError($page){
	
	$nowDate = date('Y-m-d H:i:s');
	$data = Doctrine_Query::create()->from('Page p')
	->where( "p.permalink="."'$page'")
	->leftJoin( "p.widget w" )
	->andWhere('p.publishDate <= '."'$nowDate'")
	->andWhere('p.deleted=0')->fetchOne();
	
	return $data;
}

/**
 * get default page
 * @author rohit
 * @version 1.0
 */

public static function PagesByCategory(){
	$q = Doctrine_Query::create()
	->select('id, permaLink')
	->from('Page p')
	->where('p.deleted = 0')
	->andWhere('p.publish = 1')
	->orderBy('p.pagetitle ASC')
	->fetchArray();
	return $q;
}


	/**
	 * Fetches one record according to id to show in F.A.Q. form
	 * @param $id
	 * @author rohit
	 */
	public static function getPageById($id){
		$data = Doctrine_Query::create()
		->select("p.*")
		->from('Page p')
		->where("p.id = ?" , $id)
		->andWhere('p.deleted=0')
		->fetchOne(null , Doctrine::HYDRATE_ARRAY);
		return $data;
	}	


}