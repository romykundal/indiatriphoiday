<?php

/**
 * Drawings
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Drawings extends BaseDrawings
{
	
	
	//const USER_SET_STATUS = 0;
	
	const INVALID_NEW_PASSWORD_STATUS = "-2";
	const INVALID_OLD_PASSWORD_STATUS = "-1";
	const SUCCESS = "200";
	
	public function setPassword($password) {
	
		return $this->_set('password', md5($password));
	}
	
	public function validatePassword($passwordToBeVerified) {
		if ($this->password == md5($passwordToBeVerified)) {
	
			return true;
		}
		return false;
	}
	
	public function validateEmail($emailToBeVerified) {
		if ($this->email == ($emailToBeVerified)) {
			return true;
		}
		return false;
	}
	
	
	public static function addUser($params) {
	
		$user = new User();
		$user->firstName = BackEnd_Helper_viewHelper::stripSlashesFromString($params['firstName']);
		$user->email = BackEnd_Helper_viewHelper::stripSlashesFromString($params['email']);
		$user->lastName =BackEnd_Helper_viewHelper::stripSlashesFromString($params['lastName']);
		$user->password = BackEnd_Helper_viewHelper::stripSlashesFromString($params['password']);	
		$user->roleId = 2;
		$user->usertype = "2";
	
		$pattern = '/^[0-9]{10}_(.+)/i' ;
	
		
		$user->save();
		$userLastInseretid = $user->id;
		
		
		$drawing = new Drawings();
		$drawing->userId = $userLastInseretid;
		$drawing->title =BackEnd_Helper_viewHelper::stripSlashesFromString($params['Title']);
		
		$drawing->save();
		$drawinglastId = $drawing->id;
		
		
		
		$result = self::uploadImage( $params, 'DrawingIconNameHidden' );
		if ($result['status'] == '200') {
				
			$drawing->images->itemId = $drawinglastId;
			$drawing->images->type = "IMGDRG";
			$drawing->images->ext = BackEnd_Helper_viewHelper::getImageExtension( $result['fileName'] );
			$drawing->images->path = $result['path'];
			$drawing->images->name = $result['fileName'];
				
		}
		$drawing->save();
		
		//call doctrine save function
		
		return $drawinglastId;
	
	}
	
	
	public static function checkDuplicateUser($email)
	{
	
		// $cnt  = Doctrine_Core::getTable("User")->findBy('email', $email)->count();
		$cnt  = Doctrine_Query::create()
		->from("User")->select()->where('email= ?', $email)->andWhere("deleted= 0")->fetchArray();
		// ->findBy('email', $email)->count();
	
		return count($cnt);
	}
	
	
	
	public function updateLoginTime($id){
	
		$user = Doctrine_Core::getTable("User")->find($id);
		if($user->currentLogIn=='0000-00-00 00:00:00'){
			$user->currentLogIn = date('Y-m-d H:i:s');
		}
		$user->lastLogIn = $user->currentLogIn;
		$user->currentLogIn = date('Y-m-d H:i:s');
		$user->save();
	}
	
	
	public static function update($params) {
	

		$user = Doctrine_Core::getTable("User")->find($params['userId']);
		$user->firstName = BackEnd_Helper_viewHelper::stripSlashesFromString($params['firstName']);
		$user->email = BackEnd_Helper_viewHelper::stripSlashesFromString($params['email']);
		$user->lastName =BackEnd_Helper_viewHelper::stripSlashesFromString($params['lastName']);
		
		$pattern = '/^[0-9]{10}_(.+)/i' ;
		
		$user->save();
		$userLastInseretid = $user->id;
		
		$drawing = Doctrine_Core::getTable("Drawings")->find($params['id']);
	
		$drawing->userId = $userLastInseretid;
		$drawing->title =BackEnd_Helper_viewHelper::stripSlashesFromString($params['Title']);
		
		$drawing->save();
		$drawinglastId = $drawing->id;
		
		
		if(!empty($_FILES['DrawingIconNameHidden']["name"]))
		{
			$result = self::uploadImage( $params["icon"], 'DrawingIconNameHidden' );
			if ($result['status'] == '200') {
				
				if(!empty($params['iconId'])){
					$drawingImg = Doctrine_Core::getTable("Image")->find($params['iconId']);
				}
				$drawingImg->itemId = $drawinglastId;
				$drawingImg->type = "IMGDRG";
				$drawingImg->ext = BackEnd_Helper_viewHelper::getImageExtension( $result['fileName'] );
				$drawingImg->path = $result['path'];
				$drawingImg->name = $result['fileName'];
				$drawingImg->save();
			}
		}
		
		//call doctrine save function
		return $drawinglastId;

	}
	
	
	
	public static function getdetail($id) {
	
		$data = Doctrine_Query::create()->select("d.*,u.*,i.*")
		->from('Drawings d')
		->leftJoin("d.User u")
		->leftJoin("d.images i")
		->where('d.id=?',$id)
		->fetchArray();
	
		$result = @$data[0];
		return $result;
	}
	
	public static function getList($params){
		//$role = $params['role'];
		$srh = @$params['SearchText'];
		 
		$data = Doctrine_Query::create()
		->select()
		->from("Drawings u");
		if($srh!='undefined'){
			$data->where("u.title LIKE ?", "$srh%");
		}
		$data->orderBy("u.id DESC");
		return Zend_Json::encode(
				DataTable_Helper::generateDataTableResponse($data,
						$params,
						array("__identifier" => 'u.title','u.created_at','u.updated_at'),
						array(),
						array()
				));
		 
	}
	
	public static function searchKeyword($keyword) {
		$status="null";
		$data = Doctrine_Query::create()
		->select('u.title as name')
		->from("Drawings u")
		->andWhere("u.title LIKE ?", "$keyword%")
		->orderBy("u.title ASC")
		->limit(5)->fetchArray();
		return $data;
	}
	
	
	
	
	public static function getAllUserDetail(){
		 
		$data = Doctrine_Query::create()->select("u.firstName, u.lastName,u.phoneNumber,u.address,u.ZipCode")
		->from('User u')
		//	->leftJoin("u.profileimage pi")
		->where("u.deleted = 0")
		->fetchArray();
		return $data;
	}
	
	public static function changeStatus($params) {
		//echo "<pre>";
		//print_r($params); die;
		$status = $params['status'] == 'offline' ? '0' : '1';
		$q = Doctrine_Query::create()
		->update('User u')
		->set('u.status', $status)
		->where('u.id=?', $params['id'])
		->execute();
		print_r($q);
		die;
	
	}
			
	
	
	/**
	 * upload image for drawing image
	 * @param array $params
	 * @param string $image
	 * @return string $orgName
	 * @author Er.kundal
	 * @version 1.0
	 */
	
	public static function uploadImage($oldFile ,$file) {
	
		// generate upload path for images related to category
		$uploadPath = UPLOAD_IMG_PATH."drawing/";
		//unlink image file from folder if exist
		if ($oldFile) {
			@unlink($uploadPath . $oldFile);
			@unlink($uploadPath . "thum_" . $oldFile);
			@unlink($uploadPath . "thum_large_" . $oldFile);
		}
	
		$adapter = new Zend_File_Transfer_Adapter_Http();
		 
		// generate real path for upload path
		$rootPath = ROOT_PATH . $uploadPath;
		//echo $rootPath; die;
		// get upload file info
		$files = $adapter->getFileInfo($file);
	
		// check upload directory exists, if no then create upload directory
		if (!file_exists($rootPath))
			mkdir($rootPath);
	
	
		// set destination path and apply validations
		$adapter->setDestination($rootPath);
		$adapter->addValidator('Extension', false, 'jpg,png');
	
		// get file name
		$name = $adapter->getFileName($file, false);
	
		// rename file name to by prefixing current unix timestamp
		$newName = time() . "_" . $name;
	
		// generates complete path of image
		$cp = $rootPath . $newName;
	
	
		/**
		 *	 generating thumnails for image
		 */
	
		$path = ROOT_PATH . $uploadPath . "thum_" . $newName;
		BackEnd_Helper_viewHelper::resizeImage($files[$file], $newName, 120, "", $path);
	
		$path = $uploadPath . "thum_large_" . $newName;
		BackEnd_Helper_viewHelper::resizeImage($files[$file], $newName, 336, "", $path);
	
	
		// apply filter to rename file name and set target
		$adapter
		->addFilter(
				new Zend_Filter_File_Rename(
						array('target' => $cp, 'overwrite' => true)),
				null, $file);
	
		// recieve file for upload
		$adapter->receive($file);
	
		// check is file is valid then
	
		if ($adapter->isValid($file)) {
	
			return array("fileName" => $newName, "status" => "200",
					"path" => $uploadPath);
	
		} else {
	
			return array("status" => "-1"
			);
	
		}
	
	}
	
	/************************************Front End by Romy kundal********************************************/
	

}