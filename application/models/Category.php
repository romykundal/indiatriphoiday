<?php

/**
 * Category
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Category extends BaseCategory
{

	/**
	 * save new category
	 * @param array $params
	 * @param string $imageName
	 * @return mixed
	 * @author Er.kundal
	 * @version 1.0
	 */
	public static function saveCategories($params) {

		//cal to upload icon function
		
		$data = new Category();
		$data->name = $params["categoryName"];
		$data->description = $params["description"];
		$data->status = true;
		$data->save();
		
		
		/*$result = self::uploadImage( $params, 'categoryIconNameHidden' );
		if ($result['status'] == '200') {
			
			$data->images->itemId = $data->id;
			$data->images->type = "IMGCAT";
			$data->images->ext = BackEnd_Helper_viewHelper::getImageExtension( $result['fileName'] );
			$data->images->path = $result['path'];
			$data->images->name = $result['fileName'];
			
		}*/
		
		$data->save();

		return array($data->toArray(), $data->toArray());
	}
	
	/**
	 * detail of editable category
	 * @param integer $id
	 * @return array $data
	 * @author romy
	 * @version 1.0
	 */
	public static function getCategory($id) {
	
		$data = Doctrine_Query::create()->select("c.*,i.*")
		->from('Category c')
		->LeftJoin("c.images i")
		->where("id = ?", $id)
		->fetchArray();
		return $data;
	
	}

	/**
	 * update by id category
	 * @param array $params
	 * @author romy
	 * @version 1.0
	 */
	public static function updateCategory($params) {

		$iconId = $params['iconId'];
	    //find by id 
		$data = Doctrine_Core::getTable('Category')->find( $params['id'] );
		$data->name = $params["categoryName"];
		$data->description = $params["description"];
		$data->status = true;
		

		if(!empty($_FILES["categoryIconNameHidden"]["name"]))
		{
		
			$result = self::uploadImage( @$params['iconeName'] , 'categoryIconNameHidden' );
			if ($result['status'] == '200'){
			
			$data->images->itemId = $data->id;
			$data->images->type = "IMGCAT";
			$data->images->ext = BackEnd_Helper_viewHelper::getImageExtension( $result['fileName'] );
			$data->images->path = $result['path'];
			$data->images->name = $result['fileName'];
			
		 }
		
	$a = $data->save();
		
		}
	return $a;
	}
	/**
	 * upload image for category icon
	 * @param array $params
	 * @param string $image
	 * @return string $orgName
	 * @author Er.kundal
	 * @version 1.0
	 */
	
	public static function uploadImage($oldFile ,$file) {
	 
	    // generate upload path for images related to category
		 $uploadPath = UPLOAD_IMG_PATH."category/";
		//unlink image file from folder if exist
		if ($oldFile) {
			@unlink($uploadPath . $oldFile);
			@unlink($uploadPath . "thum_" . $oldFile);
			@unlink($uploadPath . "thum_large" . $oldFile);
		}
	
	    $adapter = new Zend_File_Transfer_Adapter_Http();
	      
		// generate real path for upload path
		$rootPath = ROOT_PATH . $uploadPath;
		//echo $rootPath; die;
	     // get upload file info
		$files = $adapter->getFileInfo($file);
	
		// check upload directory exists, if no then create upload directory
		if (!file_exists($rootPath))
			mkdir($rootPath);
	
		
		// set destination path and apply validations
		$adapter->setDestination($rootPath);
		$adapter->addValidator('Extension', false, 'jpg,png');
	
		// get file name
		$name = $adapter->getFileName($file, false);
	
		// rename file name to by prefixing current unix timestamp
		$newName = time() . "_" . $name;
	
		// generates complete path of image
		$cp = $rootPath . $newName; 
		/**
		 *	 generating thumnails for image
		 */
	
		$path = ROOT_PATH . $uploadPath . "thum_" . $newName;
		BackEnd_Helper_viewHelper::resizeImage($files[$file], $newName, 135, "", $path);
	
		$path = $uploadPath . "thum_large_" . $newName;
		BackEnd_Helper_viewHelper::resizeImage($files[$file], $newName, 520, "", $path);
	
	
		// apply filter to rename file name and set target
		$adapter
		->addFilter(
				new Zend_Filter_File_Rename(
						array('target' => $cp, 'overwrite' => true)),
				null, $file);
	
		// recieve file for upload
		$adapter->receive($file);
	
		// check is file is valid then
	
		if ($adapter->isValid($file)) {
	
			return array("fileName" => $newName, "status" => "200",
					"path" => $uploadPath);
	
		} else {
	
			return array("status" => "-1"
			);
	
		}
	
	}
	
	
	/**
	 * @param array $params
	 * @return array $categoryList
	 * @author romy updated by Er.kundal
	 * @version 1.0
	 */
	public static function getCategoryList($params = "") {
		
		$conn2 = BackEnd_Helper_viewHelper::addConnection();//connection generate with second database
		BackEnd_Helper_viewHelper::closeConnection($conn2);
		$srh = @$params["SearchText"] != 'undefined' ? @$params["SearchText"] : '';
		$categoryList = Doctrine_Query::create()
				->select('c.id as id,c.name as name ,c.status as status')
				->from("Category c")
		        ->Where("deleted = 0" )
		        ->andWhere("c.name LIKE ?", "$srh%")
		        ->orderBy("c.id DESC");

		$list =     DataTable_Helper::generateDataTableResponse($categoryList,
						$params, array("__identifier" => 'c.id', 'c.id','c.name'),
						array(), array());
        return $list;

	}
	
	/**
	 * @param array $params
	 * @return array $categoryList for product listbox
	 * @author updated by Er.kundal
	 * @version 1.0
	 */
	public static function getCategories() {
	

		$catg = Doctrine_Query::create()
		->select('c.id as id,c.name as name ,c.status as status')
		->from("Category c")
		->Where("deleted = 0" )
		->andWhere("status = 1" )
		->orderBy("c.id DESC")
		->fetchArray();
		return $catg;
	
	}

	public static function getfrontendCategories() {
	
	
		$catg = Doctrine_Query::create()
		->select('c.id as id,c.name as name ,c.status as status')
		->from("Category c")
		->Where("deleted = 0" )
		->andWhere("status = 1" )
		->orderBy("c.id DESC")
		->limit(5)
		->fetchArray();
		return $catg;
	
	}
	
	
	
	/**
	 * get to five category 
	 * @param string $keyword
	 * @return array $data
	 * @author romy
	 * @version 1.0
	 */
	public static function searchToFiveCategory($keyword) {

		$data = Doctrine_Query::create()->select('c.name as name')
				->from("Category c")->where('c.deleted=0')
				->andWhere("c.name LIKE ?", "$keyword%")->orderBy("c.name ASC")
				->limit(5)->fetchArray();
		return $data;
	}
	/**
	 *change status of category
	 * @param array $params
	 * @author romy
	 * @version 1.0
	 */
	public static function changeStatus($params) {
		
		$status = $params['status'] == 'offline' ? '0' : '1';
		$q = Doctrine_Query::create()->update('Category c')
				->set('c.status', $status)->where('c.id=?', $params['id'])
				->execute();

	}

	/**
	 * deleted category by id
	 * @param integer $params
	 * @author er.kundal
	 * @version 1.0
	 */
	public static function deleteCategory($params) {

		$q = Doctrine_Query::create()->update('Category c')
				                    ->set('c.deleted', 1)
				                    ->where('c.id=?', $params['id'])
				                    ->execute();
	}

	/**
	 * get list of category for export
	 * @author er.kundal
	 * @return array $offerList
	 * @version 1.0
	 */
	public static function exportcategoryList() {

		$categoryList = Doctrine_Query::create()->select('c.*')
				->from("Category  c")->where("c.deleted=0")
				->orderBy("c.id DESC")->fetchArray();
		return $categoryList;

	}
	
	/**
	 * @return array $categoryList for frontend
	 * @author Rohit
	 * @version 1.0
	 */
	public static function getCategoryForFront() {
	
	
		$catg = Doctrine_Query::create()
		->select('c.*')
		->from("Category c")
		->Where("c.deleted = 0" )
		->andWhere("c.status = 1" )
		->orderBy("c.name ASC")
		->fetchArray();
		return $catg;
	
	}
	
	
	
// End class	
	}